{"remainingRequest":"/Users/malte/Desktop/Malte/interview-task/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/malte/Desktop/Malte/interview-task/src/pages/ToDoList.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/malte/Desktop/Malte/interview-task/src/pages/ToDoList.vue","mtime":1624923814891},{"path":"/Users/malte/Desktop/Malte/interview-task/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/malte/Desktop/Malte/interview-task/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/malte/Desktop/Malte/interview-task/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/malte/Desktop/Malte/interview-task/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7IG1hcFN0YXRlIH0gZnJvbSAidnVleCI7CmltcG9ydCBUYXNrSXRlbSBmcm9tICIuLi9jb21wb25lbnRzL1Rhc2tJdGVtLnZ1ZSI7CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAiVG9Eb0xpc3QiLAogIGNvbXBvbmVudHM6IHsgVGFza0l0ZW0gfSwKICBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgdXNlcklucHV0OiAiIiwKICAgIH07CiAgfSwKICBjb21wdXRlZDogewogICAgLi4ubWFwU3RhdGUoWyJ0b2RvTGlzdCJdKSwKICB9LAogIG1ldGhvZHM6IHsKICAgIG5ld1Rhc2soKSB7CiAgICAgIGNvbnN0IHRhc2sgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgidGFzay1pbnB1dCIpOwogICAgICBpZiAodGhpcy51c2VySW5wdXQgPT0gIiIpIHsKICAgICAgICB0YXNrLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICJyZ2IoMjU1LCAxOTUsIDE5NSkiOwogICAgICAgIHRhc2sucGxhY2Vob2xkZXIgPSAiV3JpdGUgeW91ciB0YXNrIGhlcmUiOwogICAgICB9IGVsc2UgewogICAgICAgIHRhc2suc3R5bGUuYmFja2dyb3VuZENvbG9yID0gIndoaXRlIjsKICAgICAgICB0aGlzLiRzdG9yZS5jb21taXQoImFkZFRhc2siLCB0aGlzLnVzZXJJbnB1dCk7CiAgICAgICAgdGhpcy51c2VySW5wdXQgPSAiIjsKICAgICAgfQogICAgfSwKICB9LAogIHdhdGNoOiB7CiAgICB1c2VySW5wdXQ6IGZ1bmN0aW9uICgpIHsKICAgICAgY29uc3QgdGFzayA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJ0YXNrLWlucHV0Iik7CiAgICAgIHRhc2suc3R5bGUuYmFja2dyb3VuZENvbG9yID0gIndoaXRlIjsKICAgIH0sCiAgfSwKfTsK"},{"version":3,"sources":["ToDoList.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ToDoList.vue","sourceRoot":"src/pages","sourcesContent":["<template>\n  <div class=\"todo-container\">\n    <h1>TO-DO List</h1>\n\n    <input\n      id=\"task-input\"\n      type=\"text\"\n      placeholder=\"Write your task here\"\n      v-model=\"userInput\"\n    />\n    <button @click=\"newTask()\">Add task</button>\n\n    <h2>Not finished tasks</h2>\n    <div v-for=\"(task, index) in todoList\" :key=\"index\">\n      <TaskItem\n        v-if=\"task.finished == false\"\n        :taskTitle=\"task.title\"\n        :taskStatus=\"task.finished\"\n        :index=\"index\"\n      />\n    </div>\n\n    <h2>Finished tasks</h2>\n    <div\n      v-for=\"(task, index) in todoList\"\n      :key=\"'finished' + index\"\n      :style=\"{ opacity: '0.5' }\"\n    >\n      <TaskItem\n        v-if=\"task.finished == true\"\n        :taskTitle=\"task.title\"\n        :taskStatus=\"task.finished\"\n        :index=\"index\"\n      />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from \"vuex\";\nimport TaskItem from \"../components/TaskItem.vue\";\nexport default {\n  name: \"ToDoList\",\n  components: { TaskItem },\n  data() {\n    return {\n      userInput: \"\",\n    };\n  },\n  computed: {\n    ...mapState([\"todoList\"]),\n  },\n  methods: {\n    newTask() {\n      const task = document.getElementById(\"task-input\");\n      if (this.userInput == \"\") {\n        task.style.backgroundColor = \"rgb(255, 195, 195)\";\n        task.placeholder = \"Write your task here\";\n      } else {\n        task.style.backgroundColor = \"white\";\n        this.$store.commit(\"addTask\", this.userInput);\n        this.userInput = \"\";\n      }\n    },\n  },\n  watch: {\n    userInput: function () {\n      const task = document.getElementById(\"task-input\");\n      task.style.backgroundColor = \"white\";\n    },\n  },\n};\n</script>\n\n<style scoped>\n.todo-container {\n  min-width: 300px;\n  max-width: 25%;\n  margin-left: auto;\n  margin-right: auto;\n}\n\nbutton {\n  background-color: rgb(36, 189, 70);\n  color: white;\n  font-size: 16px;\n  border-radius: 20px;\n  border: none;\n  padding: 8px 24px;\n  cursor: pointer;\n}\n\n*:focus {\n  -webkit-tap-highlight-color: transparent;\n  outline: none;\n}\n\nh1 {\n  font-size: 24px;\n  font-weight: 400;\n  color: rgb(163, 163, 163);\n}\n\nh2 {\n  font-size: 16px;\n  font-weight: 400;\n  color: rgb(163, 163, 163);\n  text-align: left;\n  margin-top: 30px;\n  margin-bottom: 10px;\n}\n\ninput {\n  width: 100%;\n  padding: 10px;\n  margin-bottom: 20px;\n  border: none;\n  border-radius: 10px;\n  -webkit-box-shadow: 0px 3px 5px 0px rgba(0, 0, 0, 0.2);\n  box-shadow: 0px 3px 5px 0px rgba(0, 0, 0, 0.2);\n  outline: none;\n  font-size: 16px;\n  color: rgb(0, 0, 0);\n  width: 100%;\n  -webkit-box-sizing: border-box; /* Safari/Chrome, other WebKit */\n  -moz-box-sizing: border-box; /* Firefox, other Gecko */\n  box-sizing: border-box;\n}\n\ninput::placeholder {\n  color: rgb(163, 163, 163);\n}\n</style>"]}]}